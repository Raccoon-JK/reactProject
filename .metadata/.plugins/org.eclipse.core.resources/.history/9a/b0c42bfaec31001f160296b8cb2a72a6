package com.example.demo.board.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.board.dto.BoardDTO;
import com.example.demo.board.dto.CriteriaDTO;
import com.example.demo.board.dto.FileDTO;
import com.example.demo.board.dto.PageDTO;
import com.example.demo.board.service.BoardService;
import com.example.demo.comments.dto.CommentsDTO;
import com.example.demo.comments.service.CommentsService;
import com.example.demo.member.dto.MemberDTO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Controller
public class BoardController {
	
	private final BoardService boardService;
	private final CommentsService commentsService;
	
	/* 게시판 페이지 */
	@ResponseBody
	@GetMapping("/api/boards")
	public ResponseEntity<Map<String, Object>> getBoards(HttpServletRequest request, CriteriaDTO cri){
	    System.out.println("---------------왔나요----------------");
	    HttpSession session = request.getSession(false);
	    boolean isLoggedIn = session != null && session.getAttribute("loginMember") != null;

	    List<BoardDTO> boards = boardService.getBoardAll(cri);
	    int total = boardService.getTotal();
	    PageDTO page = new PageDTO(cri, total);
	    List<BoardDTO> commentNumList = boardService.getCommentNum();

	    for (BoardDTO board : boards) {
	        for (BoardDTO commentNum : commentNumList) {
	            if (board.getBoardNo() == commentNum.getBoardNo()) {
	                board.setCommentCount(commentNum.getCommentCount());
	                break;
	            }
	        }
	    }

	    Map<String, Object> response = new HashMap<>();
	    response.put("isLoggedIn", isLoggedIn);
	    response.put("boards", boards);
	    response.put("page", page);
	    
	    log.info("왔냐2?? : " + response);
	    return ResponseEntity.ok(response);
	}
	
	/* 게시글작성 페이지 */
	@GetMapping("/board/write")
	public String readyWrite(HttpServletRequest request, Model model){
		
		HttpSession session = request.getSession(false);
		boolean isloggedIn = session != null && session.getAttribute("loginMember") != null;
		
		if(!isloggedIn) {
			return "redirect:/board/tables";
		}
		model.addAttribute("isloggedIn", isloggedIn);
		
		return "board/write";
	}
	
	/* 게시글 작성 */
	@ResponseBody
	@PostMapping("/board/Write")
	public ResponseEntity<?> boardCreate(String boardTitle, 
								String boardContent, 
								HttpSession session,
								MultipartFile[] files,
								Model model) {
		
		Object loginMember = session.getAttribute("loginMember");
		
		MemberDTO memberDTO = (MemberDTO) loginMember;
		
		int userNo = memberDTO.getUserNo();
		
		if(loginMember == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 후 이용 가능합니다.");
		}
		
		BoardDTO boardDTO = new BoardDTO();
		boardDTO.setUserNo(userNo);
		boardDTO.setBoardTitle(boardTitle);
		boardDTO.setBoardContent(boardContent);
		boardDTO.setFiles(files);

		boardService.boardCreate(boardDTO);
		
		Map<String, Object> response = new HashMap<>();
		response.put("success", true);
		
		return ResponseEntity.ok(response);
	}
	
	/* 게시글 상세페이지 */
	@ResponseBody
	@GetMapping("/board/Detail")
	public ResponseEntity<Map<String, Object>> main(HttpServletRequest request, @RequestParam int boardNo) {
		
		HttpSession session = request.getSession();
		boolean isloggedIn = session != null && session.getAttribute("loginMember") != null;
		
		Map<String, Object> response = new HashMap<>();
		response.put("isloggedIn", isloggedIn);
		response.put("loginMember", session.getAttribute("loginMember"));
		response.put("board", boardService.boardSelect(boardNo));
		
		List<FileDTO> fileList = boardService.boardFile(boardNo);
		response.put("fileList", fileList);
		
		List<CommentsDTO> comments = commentsService.commentSelect(boardNo);
		response.put("comments", comments);		
		
		return ResponseEntity.ok(response);	
	}
	
	/* 게시글 삭제 */
	@ResponseBody
	@PostMapping("/deleteBoard")
	public int boardDelete(@RequestParam("boardNo") Integer boardNo) {
		
		int result = boardService.boardDelete(boardNo);
		
		System.out.println("result : " + result); 
		
		return result;		
	}
	
	/* 게시글 수정 페이지 */
	@ResponseBody
	@GetMapping("/board/Modify")
	public ResponseEntity<?> getBoardModify(HttpServletRequest request, @RequestParam int boardNo) {
		
		HttpSession session = request.getSession(false);
		boolean isloggedIn = session != null && session.getAttribute("loginMember") != null;
		
		Map<String, Object> response = new HashMap<>();
		
		 BoardDTO board = boardService.boardSelect(boardNo);
		 MemberDTO member = (MemberDTO)session.getAttribute("loginMember");
		 
		 if (!isloggedIn || board.getUserNo() != member.getUserNo()){
			 return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 후 이용 가능합니다.");
		 }		 
		
		 response.put("isloggedIn", isloggedIn);		
		 response.put("board", boardService.boardSelect(boardNo));
		
		List<FileDTO> fileList = boardService.boardFile(boardNo);
		response.put("fileList", fileList);
		
		return ResponseEntity.ok(response);	
	}
	
	/* 게시글 수정 */
	@ResponseBody
	@PostMapping("/modifyBoard")
	public ResponseEntity<?> boardUpdate(@RequestParam("boardNo") int boardNo,
	                                     @RequestParam("boardTitle") String boardTitle,
	                                     @RequestParam("boardContent") String boardContent,
	                                     @RequestParam(value = "deletedFiles", required = false) String deletedFiles,
	                                     @RequestParam(value = "files", required = false) MultipartFile[] files) {
	    
	    BoardDTO boardDTO = new BoardDTO();
	    boardDTO.setBoardNo(boardNo);
	    boardDTO.setBoardTitle(boardTitle);
	    boardDTO.setBoardContent(boardContent);

	    if (deletedFiles != null) {
	        boardDTO.setDeletedFiles(deletedFiles);
	    }

	    if (files != null && files.length > 0) {
	        boardDTO.setFiles(files);
	    }

	    int result = boardService.boardUpdate(boardDTO);

	    Map<String, Object> response = new HashMap<>();
	    response.put("success", result > 0);

	    return ResponseEntity.ok(response);
	}
	

	

}
